(function (modules) {
  var installedModules = {};
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) {
      return installedModules[moduleId].exports;
    }
    var module = installedModules[moduleId] = {
      i: moduleId,
      l: false,
      exports: {}
    };
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    module.l = true;
    return module.exports;
  }
  __webpack_require__.m = modules;
  __webpack_require__.c = installedModules;
  __webpack_require__.i = function (value) {
    return value;
  };
  __webpack_require__.d = function (exports, name, getter) {
    if (!__webpack_require__.o(exports, name)) {
      Object.defineProperty(exports, name, {
        configurable: false,
        enumerable: true,
        get: getter
      });
    }
  };
  __webpack_require__.n = function (module) {
    var getter = module && module.__esModule ? function getDefault() {
      return module['default'];
    } : function getModuleExports() {
      return module;
    };
    __webpack_require__.d(getter, 'a', getter);
    return getter;
  };
  __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  __webpack_require__.p = "";
  return __webpack_require__(__webpack_require__.s = 56);
}({
  20: function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = function () {
      var initialized = false;
      var analyticsRandom = Math.floor(Math.random() * 25) === 0;
      var secondTracker = false;
      var expose = {
        init: function init() {
          if (initialized) {
            return;
          }
          (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r;
            i[r] = i[r] || function () {
              (i[r].q = i[r].q || []).push(arguments);
            }, i[r].l = 1 * new Date();
            a = s.createElement(o), m = s.getElementsByTagName(o)[0];
            a.async = 1;
            a.src = g;
            m.parentNode.insertBefore(a, m);
          }(window, document, 'script', '//www.google-analytics.com/analytics.js', 'PokiAnalytics'));
          initialized = true;
          var trackerName = 'UA-134699142-2';
          PokiAnalytics('create', trackerName, 'auto');
          PokiAnalytics('send', 'pageview');
          if (typeof window.pokiGameTracker !== 'undefined') {
            PokiAnalytics('create', window.pokiGameTracker, 'auto', { name: 'second' });
            PokiAnalytics('second.send', 'pageview');
            secondTracker = true;
          }
        },
        forceFullAnalytics: function forceFullAnalytics() {
          analyticsRandom = true;
        },
        setDimensions: function setDimensions(details) {
          if (!initialized) {
            expose.init();
          }
          details.hash = details.hash || '';
          details.referenceId = details.referenceId || '';
          details.gameId = details.gameId || '';
          details.gameStudioId = details.gameStudioId || '';
          details.distributorId = details.distributorId || '';
          PokiAnalytics('set', 'dimension1', details.hash);
          PokiAnalytics('set', 'dimension2', details.referenceId);
          PokiAnalytics('set', 'dimension3', details.gameId);
          PokiAnalytics('set', 'dimension4', details.gameStudioId);
          PokiAnalytics('set', 'dimension5', details.distributorId);
        },
        setDimension: function setDimension(dimension, value) {
          if (secondTracker) {
            PokiAnalytics('second.set', dimension, value);
          }
        },
        hit: function hit(eventCategory, eventAction, eventValue) {
          expose.valueHit(eventCategory, eventAction, eventValue);
        },
        valueHit: function valueHit(eventCategory, eventAction, eventLabel, eventValue) {
          if (!initialized) {
            expose.init();
          }
          if (analyticsRandom) {
            PokiAnalytics('send', 'event', eventCategory, eventAction, eventLabel, eventValue);
            if (secondTracker) {
              PokiAnalytics('second.send', 'event', eventCategory, eventAction, eventLabel, eventValue);
            }
          }
        }
      };
      return expose;
    }();
  },
  56: function (module, exports, __webpack_require__) {
    var _GA = __webpack_require__(20);
    var _GA2 = _interopRequireDefault(_GA);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    window.pokiGameTracker = 'UA-134699142-2';
    var gaWhitelist = [
      { category: 'rewarded_video' },
      { category: 'midroll' },
      {
        category: 'promotion',
        action: 'app_impression'
      },
      {
        category: 'promotion',
        action: 'app_click_from'
      },
      {
        category: 'promotion',
        action: 'app_click_to'
      }
    ];
    window.analytics = {
      init: function init() {
        var _this = this;
        this.track('technical_performance', 'version', "9.0.0", 1559566796178);
        window.addEventListener('error', function (error) {
          _this.track('technical_performance', 'javascript_error', error.filename + '@l' + error.lineno + 'c' + error.colno + ': ' + error.message);
        });
      },
      track: function track(category, action, label, value, skipAnalytics) {
        if (false) {
          console.log('TRACK: ', category, action || '', label || '', value || 0);
          return;
        }
        var value = parseFloat(value);
        if (isNaN(value)) {
          value = undefined;
        }
        if (!skipAnalytics) {
          var track = false;
          gaWhitelist.forEach(function (evt) {
            if (evt.category === category && (!evt.action || evt.action === action)) {
              track = true;
            }
          });
          if (track) {
            _GA2.default.forceFullAnalytics();
            _GA2.default.valueHit(category, action, label, value);
          }
        }
      },
      setDimension: function setDimension(dimension, value) {
        if (false) {
          console.log('SETTING DIMENSION: ', dimension, value);
          return;
        }
        _GA2.default.setDimension(dimension, value);
      }
    };
    analytics.init();
  }
}));